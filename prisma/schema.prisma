generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId       Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  profileImg   String?
  phoneNumber  String         @unique
  role         String         @default("user")
  petCategory  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isTrainer    Boolean        @default(false)
  likes        Likes[]
  Points       Points?
  reservations Reservations[]
  reviews      Reviews[]
  trainers     Trainers?
}

model Trainers {
  trainerId    Int            @id @default(autoincrement())
  userId       Int            @unique
  career       Int
  petCategory  String
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  price        Int
  likes        Likes[]
  reservations Reservations[]
  reviews      Reviews[]
  users        Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Reservations {
  reservationId Int           @id @default(autoincrement())
  userId        Int
  trainerId     Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        ReserveStatus @default(STANDBY)
  trainers      Trainers      @relation(fields: [trainerId], references: [trainerId], onDelete: Cascade)
  users         Users         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([trainerId], map: "Reservations_trainerId_fkey")
  @@index([userId], map: "Reservations_userId_fkey")
}

model Reviews {
  reviewId  Int      @id @default(autoincrement())
  userId    Int
  trainerId Int
  content   String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trainers  Trainers @relation(fields: [trainerId], references: [trainerId], onDelete: Cascade)
  users     Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([trainerId], map: "Reviews_trainerId_fkey")
  @@index([userId], map: "Reviews_userId_fkey")
}

model Likes {
  userId    Int
  trainerId Int
  createdAt DateTime @default(now())
  trainers  Trainers @relation(fields: [trainerId], references: [trainerId], onDelete: Cascade)
  users     Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, trainerId])
  @@index([trainerId], map: "Likes_trainerId_fkey")
}

model PointHistory {
  historyId    String              @id
  pointId      String
  point        Int
  pointChanged String
  status       PointHistory_status
  createdAt    DateTime            @default(now())
  Points       Points              @relation(fields: [pointId], references: [pointId])

  @@index([pointId], map: "PointHistory_pointId_fkey")
}

model Points {
  pointId      String         @id
  userId       Int            @unique
  point        Int
  updatedAt    DateTime
  PointHistory PointHistory[]
  Users        Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum ReserveStatus {
  STANDBY
  ACCEPT
  CANCEL
}

enum PointHistory_status {
  FILL
  RESERVE
  REFUND
  CANCEL
}
